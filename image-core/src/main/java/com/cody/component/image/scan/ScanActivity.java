/* * ************************************************************ * 文件：ScanActivity.java  模块：image-core  项目：component * 当前修改时间：2019年04月23日 18:23:20 * 上次修改时间：2019年04月21日 20:24:28 * 作者：Cody.yi   https://github.com/codyer * * 描述：image-core * Copyright (c) 2019 * ************************************************************ */package com.cody.component.image.scan;import android.Manifest;import android.content.Intent;import android.content.pm.PackageManager;import android.os.Bundle;import android.os.Vibrator;import android.util.Log;import android.view.View;import android.widget.Toast;import com.cody.component.app.activity.StaticActivity;import com.cody.component.image.BuildConfig;import com.cody.component.image.ImageViewDelegate;import com.cody.component.image.OnImageViewListener;import com.cody.component.image.R;import com.cody.component.image.databinding.ActivityScanBinding;import com.cody.component.util.PermissionUtil;import com.cody.component.util.ActivityUtil;import com.lzy.imagepicker.bean.ImageItem;import java.util.List;import androidx.annotation.NonNull;import androidx.core.app.ActivityCompat;import cn.bingoogolapple.qrcode.core.BGAQRCodeUtil;import cn.bingoogolapple.qrcode.core.QRCodeView;/** * 二维码扫描（测试用） */public class ScanActivity extends StaticActivity<ActivityScanBinding> implements QRCodeView.Delegate, OnImageViewListener {    private static final int REQUEST_CODE_CAMERA = 1000;    public static final int REQUEST_CODE_SCAN = 1001;    public static final String SCAN_RESULT = "scan_result";    private ImageViewDelegate mImageViewDelegate;    private boolean isToast = true;//是否弹吐司，为了保证for循环只弹一次    public static void openScanActivity() {        ActivityUtil.navigateToForResult(ScanActivity.class, REQUEST_CODE_SCAN);    }    public static void openScanActivity(Object context) {        ActivityUtil.navigateToForResult(context, ScanActivity.class, REQUEST_CODE_SCAN);    }    public static String getScanResult(int requestCode, int resultCode, Intent data) {        if (requestCode == REQUEST_CODE_SCAN && resultCode == RESULT_OK) {            if (data != null) {                return data.getStringExtra(SCAN_RESULT);            }        }        return "";    }    @Override    public boolean isSupportImmersive() {        return false;    }    @Override    protected int getLayoutID() {        return R.layout.activity_scan;    }    @Override    protected void onBaseReady(final Bundle savedInstanceState) {        super.onBaseReady(savedInstanceState);        if (unBound()) return;        BGAQRCodeUtil.setDebug(BuildConfig.DEBUG);        getBinding().qrCodeView.setDelegate(this);        mImageViewDelegate = new ImageViewDelegate(this);        mImageViewDelegate.setCanDelete(false);    }    @Override    protected void onStart() {        super.onStart();        /*动态请求需要的权限*/        boolean checkPermissionFirst = PermissionUtil.checkPermissionFirst(this, REQUEST_CODE_CAMERA,                new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.CAMERA});        if (checkPermissionFirst) {            initScan();        }    }    @Override    protected void onStop() {        getBinding().qrCodeView.stopCamera();        super.onStop();    }    @Override    protected void onDestroy() {        getBinding().qrCodeView.onDestroy();        mImageViewDelegate = null;        super.onDestroy();    }    @Override    public void onScanQRCodeSuccess(String result) {        BGAQRCodeUtil.d("扫描结果：" + result);        vibrate();        Intent intent = new Intent();        intent.putExtra(SCAN_RESULT, result);        setResult(RESULT_OK, intent);        finish();    }    @Override    public void onCameraAmbientBrightnessChanged(boolean isDark) {    }    @Override    public void onScanQRCodeOpenCameraError() {    }    /**     * 处理请求权限的响应     *     * @param requestCode  请求码     * @param permissions  权限数组     * @param grantResults 请求权限结果数组     */    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        boolean isPermissions = true;        for (int i = 0; i < permissions.length; i++) {            if (grantResults[i] == PackageManager.PERMISSION_DENIED) {                isPermissions = false;                if (!ActivityCompat.shouldShowRequestPermissionRationale(this, permissions[i])) { //用户选择了"不再询问"                    if (isToast) {                        Toast.makeText(this, "请手动打开该应用需要的权限", Toast.LENGTH_SHORT).show();                        isToast = false;                    }                }            }        }        isToast = true;        if (isPermissions) {            Log.d("onRequestPermission", "onRequestPermissionsResult: " + "允许所有权限");            initScan();        } else {            Log.d("onRequestPermission", "onRequestPermissionsResult: " + "有权限不允许");            finish();        }    }    @Override    public void onClick(View v) {        if (v.getId() == R.id.back){            finish();        }else if (v.getId() == R.id.gallery){            if (null != mImageViewDelegate) {                mImageViewDelegate.withId(R.id.gallery).selectImage(1, true);            }        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (null != mImageViewDelegate) {            mImageViewDelegate.onActivityResult(requestCode, resultCode, data);        }    }    @Override    public void onPreview(int id, List<ImageItem> images) {    }    @Override    public void onPickImage(int id, List<ImageItem> images) {        if (images == null || images.size() == 0) return;        if (id == R.id.gallery) {            getBinding().qrCodeView.decodeQRCode(images.get(0).path);        }    }    private void vibrate() {        Vibrator vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);        if (vibrator != null) {            vibrator.vibrate(200);        }    }    private void initScan() {        getBinding().qrCodeView.startCamera();        getBinding().qrCodeView.startSpotAndShowRect(); // 显示扫描框，并且延迟0.1秒后开始识别    }}